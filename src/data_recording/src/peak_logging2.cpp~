#include "ros/ros.h"
#include "std_msgs/String.h"
#include "std_msgs/Float32.h"
#include "std_msgs/Int32.h"
#include "std_msgs/Int16.h"
#include "sensor_msgs/JointState.h"
#include <iostream>
#include <fstream>
#include <unistd.h>
#include <time.h> 
#include <string>
//using namespace std;

float max;
float prior = 0;
float prioraccepted = 0;
int flag1 = 0;
int flag2 = 0;
int flag3 = 0;
int stalk_dia;
float gps = 0;
std::string config;
float angle;


void diaCallback(const std_msgs::Int32::ConstPtr& msg)
{
    	//ROS_INFO_STREAM("TO WRITE TO LOG FILE, DIA = " << msg->data); 
	stalk_dia = msg->data;
	flag1 = 1;    
}


void Callback(const std_msgs::Float32::ConstPtr& msg)
{
	if((msg->data) > prior)
	{
		max = msg->data;
		prior = max;
	}
}

void angleCallback(const sensor_msgs::JointState::ConstPtr& msg)  //change this to GPS data type
{
	angle = msg->position[2];	  //change this to GPS data!
	if(angle>0)
	{
		config = "right";
		ROS_INFO("CONFIG IS RIGHT");
	}
	else
	{
		config = "left";
		ROS_INFO("CONFIG IS LEFT");
	}
	flag2 == 1;
}

void gpsCallback(const sensor_msgs::JointState::ConstPtr& msg)  //change this to GPS data type
{
	gps = msg->position[0];	  //change this to GPS data!
	flag3 = 1;
}


void startCallback(const std_msgs::Int16::ConstPtr& msg)
{
	ros::NodeHandle nh;
	ros::Subscriber sub = nh.subscribe("load_cell_pounds", 1000, Callback);
	for(int i=0; i<5000; i++)  //this is a bit of a hack. It counts for ~5 seconds, which could be off on larger stalks
	{
		usleep(1000);
		ros::spinOnce();
	}
	prior = 0;
	flag1 = 0;
	flag2 = 0;
	flag3 = 0;
	sub = nh.subscribe("stalk_dia", 1000, diaCallback);
	while(flag1==0)
	{
		ros::spinOnce();
	}
	sub = nh.subscribe("joint_states", 1000, angleCallback);
	while(flag2==0)
	{
		ros::spinOnce();	
	}	
	sub = nh.subscribe("joint_states", 1000, gpsCallback);  //change subscription topic to GPS!!
	while(flag3==0)
	{
		ros::spinOnce();
	}

	//ROS_INFO("TESTING TESTING 123!!");
	time_t timer;
	timer = time(NULL);    

	std::ofstream myfile;
	myfile.open("/home/boost-1/test3/src/data_recording/data/datalog.txt", std::ios::app);
	myfile << "\n";	
	myfile << timer;
	myfile << ", ";	
	myfile << max;
	myfile << " lbs, ";
	myfile << stalk_dia;
	myfile << " mm dia, ";
	myfile << config;
	myfile << " config, ";
	myfile << gps;
	myfile.close();
	
}


int main(int argc, char **argv)
{

  ros::init(argc, argv, "listener");

  ros::NodeHandle n;

  ros::Subscriber start_sub = n.subscribe("start", 1000, startCallback);

  ros::spin();

  return 0;
}
